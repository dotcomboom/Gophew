import os
import json
import pituophis as p

# Gophew settings
settings = {
    'index': 'w2krepo.json',  # Index to use (generated by crawler.py)
    'alternate_titles': True,  # Whether to display alternate titles
    'referrers': True,  # Whether to display referring URLs
    'search_path': '/w2krepo/search', # What the path must start with in order to do a search (a file shouldn't exist here for the alt handler to go off)
    'typestrings': True, # Allow filtering searches by type, i.e. /search01 for textfiles and directories.
    'root_path': '/w2krepo/',  # Path to link to on the results page
    # Below lines can be disabled by setting them to None
    'root_text': 'Back to root',
    'new_search_text': 'Try another search', 
    'new_search_text_same_filter': 'Try another search with the same criteria',
    'results_caption': 'Results for {} (out of {} items)',
    'types_caption': 'Filtering types: {}',

    # Pituophis server options
    'host': '127.0.0.1',
    'port': 70,
    'pub_dir': 'pub/'
}

if os.path.isfile(settings['index']):
    with open(settings['index'], 'r') as fp:
        db = json.load(fp)

def alt(request):
    if request.path.startswith(settings['search_path']):
        typestring = request.path.replace(settings['search_path'], '').replace('/', '')
        types = list(typestring)
        menu = []
        if not settings['root_text'] is None:
            menu.append(p.Item(itype='1', text=settings['root_text'], path='/', host=request.host, port=request.port))
        if not settings['new_search_text'] is None:
            menu.append(p.Item(itype='7', text=settings['new_search_text'], path=settings['search_path'], host=request.host, port=request.port))
        if (not request.path == settings['search_path']) and not settings['new_search_text_same_filter'] is None:
            menu.append(p.Item(itype='7', text=settings['new_search_text_same_filter'], path=request.path, host=request.host, port=request.port))
        if not settings['results_caption'] is None:
            menu.append(p.Item(text=settings['results_caption'].format(request.query, len(db['items']))))
        if not settings['types_caption'] is None:
            if len(types):
                menu.append(p.Item(text=settings['types_caption'].format(', '.join(types))))
        items = db['items']
        for item in items:
            sampling = item
            for title in db['items'][item]['titles']:
                sampling += title
            if request.query.lower() in sampling.lower():
                req = p.parse_url(item)
                yes = False
                if len(types) == 0:
                    yes = True
                else:
                    if req.type in types:
                        yes = True
                if yes:
                    try:
                        menu.append(p.Item(text=''))
                        menu.append(p.Item(itype=req.type, text=items[item]['titles'][0], path=req.path, host=req.host, port=req.port))
                        menu.append(p.Item(text='URL: ' + req.url()))
                        if len(items[items]['titles']) > 1:
                            if settings['alternate_titles']:
                                menu.append(item(text='Alternate titles:'))
                                for title in items[item]['titles'][1:]:
                                    menu.append(item(text='  ' + title))
                            if settings['referrers']:
                                menu.append(p.Item(text='Referred by:'))
                                for referrer in items[item]['referrers']:
                                    menu.append(p.Item(text='  ' + referrer))
                    except:
                        pass
        return menu
    else:
        return p.errors['404']


p.serve(settings['host'], settings['port'], settings['pub_dir'], alt_handler=alt)  # typical Gopher port is 70
